{"version":3,"sources":["imagenes/parqueaderos.jpg","core/store.js","redux/reducers/index.js","components/layout.js","screens/visualize-screen/visualizer.js","screens/visualize-screen/index.js","containers/visualize-screen.js","screens/create-screen/form.js","screens/create-screen/index.js","containers/create-screen.js","screens/edit-screen/edit.js","screens/edit-screen/index.js","containers/edit-screen.js","App.js","serviceWorker.js","index.js","redux/actions/index.js"],"names":["module","exports","store","createStore","rootReducer","initialState","applyMiddleware","reduxThunk","global","state","action","type","GET_ALL_USERS","users","payload","SELECT_USER_TO_EDIT","selectedUser","MainScreen","children","className","src","carro","alt","to","Visualizer","props","this","onGetAllUsers","onSelectUserEdit","onDeleteUser","scope","map","user","index","nombre","tipo","placa","class","onClick","_id","Component","defaultProps","connect","dispatch","bindActionCreators","onGetUsers","deleteUser","Form","onKeyPress","field","evt","val","target","value","newState","setState","handleOnSubmit","onSubmit","for","onChange","Nombre","id","placeholder","Tipo","Placa","onCreateUser","createUser","userInfo","console","log","submitable","EditScreen","onEditUser","alert","selectedUserInfo","find","Boolean","editUser","App","exact","path","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","fetch","api","res","json","data","Promise","reject","userId","method","body","JSON","stringify","headers","replace"],"mappings":"2UAAAA,EAAOC,QAAU,IAA0B,0C,iCCA3C,+CAKMC,EAAQC,YACVC,IACAC,EACAC,YAAgBC,MAGpBC,EAAON,MAAQA,EAEAA,Q,+GCVFE,EAAc,WAAmC,IAAlCK,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACzD,OAAOA,EAAOC,MACV,KAAKC,IACD,OAAO,2BAAKH,GAAZ,IAAmBI,MAAOH,EAAOI,UACrC,KAAKC,IACD,OAAO,2BAAKN,GAAZ,IAAmBO,aAAcN,EAAOI,UAC5C,QACI,OAAOL,K,+NCqBJQ,EAxBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,yBAAKC,UAAU,cACX,6BAASA,UAAU,QACdD,GAEL,+BACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAOC,IAAI,UAEzB,6BACI,kBAAC,IAAD,CAAMH,UAAU,+CAA+CI,GAAG,WAAlE,SAGA,kBAAC,IAAD,CAAMJ,UAAU,+CAA+CI,GAAG,KAAlE,kB,gCCdVC,E,kDACF,WAAYC,GAAQ,uCACVA,G,gEAINC,KAAKD,MAAME,kB,+BAGL,IAAD,EAC6CD,KAAKD,MAA/CZ,EADH,EACGA,MAAOe,EADV,EACUA,iBAAkBC,EAD5B,EAC4BA,aAEjC,OACI,6BACI,2BAAOV,UAAU,wBACb,2BAAOA,UAAU,cACb,4BACI,wBAAIW,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,0BACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,YAGR,+BACKjB,EAAMkB,KAAI,SAACC,EAAMC,GAAP,OACP,4BACI,wBAAIH,MAAM,OAAOG,EAAQ,GACzB,4BAAKD,EAAKE,QACV,4BAAKF,EAAKG,MACV,4BAAKH,EAAKI,OACV,4BAAI,4BAAQzB,KAAK,SAAS0B,MAAM,iBAAgBC,QAAS,kBAAMT,EAAaG,EAAKO,OAA7E,aACJ,4BAAI,kBAAC,IAAD,CAAMhB,GAAG,QAAQZ,KAAK,SAAS0B,MAAM,kBAAkBC,QAAS,kBAAMV,EAAiBI,EAAKO,OAA5F,sB,GAjCXC,aAsDzBhB,EAAWiB,aAAe,CACtB5B,MAAO,IAGIW,QCrCAP,EArBI,SAAC,GAAD,IACfU,EADe,EACfA,cACAC,EAFe,EAEfA,iBACAf,EAHe,EAGfA,MACAgB,EAJe,EAIfA,aAJe,OAMf,kBAAC,EAAD,KACI,kBAAC,EAAD,CACIF,cAAeA,EACfC,iBAAkBA,EAClBf,MAAOA,EACPgB,aAAcA,M,OC2BXa,eAZS,SAACjC,GAAD,MAAY,CAChCI,MAAOJ,EAAMI,MACbG,aAAcP,EAAMO,iBAGG,SAAA2B,GAAQ,OAAIC,YAAmB,CACtDjB,cAAekB,IACfjB,qBACAC,aAAciB,KACfH,KAGYD,EApCkB,SAAC,GAAD,IAC7Bf,EAD6B,EAC7BA,cACAC,EAF6B,EAE7BA,iBACAf,EAH6B,EAG7BA,MACAgB,EAJ6B,EAI7BA,aAJ6B,OAK3B,kBAAC,EAAD,CACFF,cAAeA,EACfC,iBAAkBA,EAClBf,MAAOA,EACPgB,aAAcA,O,QCZZkB,E,kDACF,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IASVuB,WAAa,SAAAC,GACT,OAAO,SAAAC,GACH,IAAMC,EAAMD,EAAIE,OAAOC,MACjBC,EAAQ,eAAQ,EAAK7C,OAC3B6C,EAASL,GAASE,EAClB,EAAKI,SAASD,KAfH,EAmBnBE,eAAiB,WAAO,IAAD,EACa,EAAK/C,MAA7ByB,EADW,EACXA,OAAQC,EADG,EACHA,KAAMC,EADH,EACGA,MACtB,EAAKX,MAAMgC,SAAS,CAAEvB,SAAQC,OAAMC,WAlBpC,EAAK3B,MAAQ,CACTyB,OAAQ,GACRC,KAAM,GACNC,MAAO,IANI,E,qDAyBf,OACI,6BACI,yBAAKjB,UAAU,kBACX,2BAAOuC,IAAI,cAAcvC,UAAU,2BAAnC,UACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,UAAWK,MAAO3B,KAAKjB,MAAMmD,OAAQC,GAAG,cAAcC,YAAY,aAGhJ,yBAAK3C,UAAU,kBACX,2BAAOuC,IAAI,YAAYvC,UAAU,2BAAjC,QACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,QAASK,MAAO3B,KAAKjB,MAAMsD,KAAMF,GAAG,YAAYC,YAAY,WAG1I,yBAAK3C,UAAU,kBACX,2BAAOuC,IAAI,aAAavC,UAAU,2BAAlC,SACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,SAAUK,MAAO3B,KAAKjB,MAAMuD,MAAOH,GAAG,aAAaC,YAAY,YAGzI,yBAAK3C,UAAU,kBACf,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMI,GAAG,IAAIZ,KAAK,SAASQ,UAAU,kBAAkBmB,QAASZ,KAAK8B,gBAArE,gB,GAhDLhB,aA4DnBO,EAAKN,aAAe,GAGLM,QCjDA9B,EAbI,SAAC,GAAD,IACfgD,EADe,EACfA,aADe,OAGf,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAYR,SAAUQ,MCcfvB,eAPS,SAACjC,GAAD,MAAY,MAET,SAAAkC,GAAQ,OAAIC,YAAmB,CACtDqB,aAAcC,KACfvB,KAGYD,EAjBe,SAAC,GAAD,IAC1BuB,EAD0B,EAC1BA,aAD0B,OAExB,kBAAC,EAAD,CACFA,aAAcA,OCJZlB,E,kDACF,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IAWVuB,WAAa,SAAAC,GACT,OAAO,SAAAC,GACH,IAAMC,EAAMD,EAAIE,OAAOC,MACjBC,EAAQ,eAAQ,EAAK7C,OAC3B6C,EAASL,GAASE,EAClB,EAAKI,SAASD,KAjBH,EAqBnBE,eAAiB,WAAO,IAAD,EACa,EAAK/C,MAA7ByB,EADW,EACXA,OAAQC,EADG,EACHA,KAAMC,EADH,EACGA,MACtB,EAAKX,MAAMgC,SAAS,CAAEvB,SAAQC,OAAMC,WApBpC,EAAK3B,MAAQ,CACTyB,OAAQT,EAAM0C,SAASjC,OACvBC,KAAMV,EAAM0C,SAAShC,KACrBC,MAAOX,EAAM0C,SAAS/B,OAG1BgC,QAAQC,IAAI,EAAK5D,MAAO,MATT,E,qDA0BT,IACE6D,EAAe5C,KAAKD,MAApB6C,WADH,EAG2B5C,KAAKjB,MAA7ByB,EAHH,EAGGA,OAAQC,EAHX,EAGWA,KAAMC,EAHjB,EAGiBA,MAEtB,OACI,6BACI,yBAAKjB,UAAU,kBACX,2BAAOuC,IAAI,cAAcvC,UAAU,2BAAnC,UACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,UAAWK,MAAOnB,EAAQ2B,GAAG,cAAcC,YAAY,aAGrI,yBAAK3C,UAAU,kBACX,2BAAOuC,IAAI,YAAYvC,UAAU,2BAAjC,QACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,QAASK,MAAOlB,EAAM0B,GAAG,YAAYC,YAAY,WAG/H,yBAAK3C,UAAU,kBACX,2BAAOuC,IAAI,aAAavC,UAAU,2BAAlC,SACA,yBAAKA,UAAU,aACX,2BAAOR,KAAK,OAAOQ,UAAU,eAAewC,SAAUjC,KAAKsB,WAAW,SAAUK,MAAOjB,EAAOyB,GAAG,aAAaC,YAAY,YAG9H,yBAAK3C,UAAU,kBACf,yBAAKA,UAAU,aACVmD,GACG,kBAAC,IAAD,CAAM/C,GAAG,IAAIZ,KAAK,SAASQ,UAAU,kBAAkBmB,QAASZ,KAAK8B,gBAArE,qB,GAvDThB,aA0EnBO,EAAKN,aAAe,CAChB0B,SAAU,GACVG,YAAY,GAGDvB,QCtDAwB,EA1BI,SAAC,GAIb,IAHHC,EAGE,EAHFA,WACAxD,EAEE,EAFFA,aACAH,EACE,EADFA,MAEKG,GACDyD,MAAM,0DAEV,IAAMC,EAAmB7D,EAAM8D,MAAK,SAAA3C,GAAI,OAAIA,EAAKO,MAAQvB,KAMzD,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUyC,SANG,SAAC,GAA6B,IAA3BvB,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAClCoC,EAAWxD,EAAc,CAAEkB,SAAQC,OAAMC,WAKHkC,WAAYM,QAAQ5D,GAAemD,SAAUO,MCY5EhC,eAVS,SAACjC,GAAD,MAAY,CAChCI,MAAOJ,EAAMI,MACbG,aAAcP,EAAMO,iBAGG,SAAA2B,GAAQ,OAAIC,YAAmB,CACtD4B,WAAYK,KACblC,KAGYD,EA1Ba,SAAC,GAAD,IACxB8B,EADwB,EACxBA,WACA3D,EAFwB,EAExBA,MACAG,EAHwB,EAGxBA,aAHwB,OAItB,kBAAC,EAAD,CACFwD,WAAYA,EACZ3D,MAAOA,EACPG,aAAcA,O,eCsBH8D,MA3Bf,WACE,OACE,yBAAK3D,UAAU,OACb,kBAAC,IAAD,CAAUjB,MAAOA,KACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6E,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAChB,+CAIF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAChB,kBAAC,EAAD,YCfMJ,QACW,cAA7BK,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a,+BEzI5B,0PAEatF,EAAgB,gBAGhBG,EAAsB,sBAEtB8B,EAAa,kBACtB,SAAAF,GAAQ,OAAIwD,MAAMC,EAAIvF,OACrBgF,MAAK,SAAAQ,GAAG,OAAIA,EAAIC,UAChBT,MAAK,SAAAU,GACF5D,EAAS,CACLhC,KAAMC,EACNE,QAASyF,OAGhBP,MAAMQ,QAAQC,UAEN7E,EAAmB,SAAC8E,GAAD,OAC5B,SAAA/D,GAAQ,OAAIA,EAAS,CACjBhC,KAAMI,EACND,QAAS4F,MAGJxC,EAAa,SAAC,GAAD,IACtBhC,EADsB,EACtBA,OACAC,EAFsB,EAEtBA,KACAC,EAHsB,EAGtBA,MAHsB,OAKtB,SAAAO,GAAQ,OAAIwD,MAAMC,EAAIvF,MAAO,CACzB8F,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAE5E,SAAQC,OAAMC,UACrC2E,QAAS,CACL,eAAgB,sBAEnBlB,MAAK,SAAAQ,GAAG,OAAIA,EAAIC,UAChBN,MAAMQ,QAAQC,UAEV5B,EAAW,SAAC6B,EAAD,OACpBxE,EADoB,EACpBA,OACAC,EAFoB,EAEpBA,KACAC,EAHoB,EAGpBA,MAHoB,OAKpB,SAAAO,GAAQ,OAAIwD,MAAMC,EAAIpE,KAAKgF,QAAQ,OAAQN,GAAS,CAChDC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CAAE5E,SAAQC,OAAMC,UACrC2E,QAAS,CACL,eAAgB,sBAEnBlB,MAAK,kBAAMM,MAAMC,EAAIvF,OACjBgF,MAAK,SAAAQ,GAAG,OAAIA,EAAIC,UAChBT,MAAK,SAAAU,GACF5D,EAAS,CACLhC,KAAMC,EACNE,QAASyF,OAGhBP,MAAMQ,QAAQC,WAClBT,MAAMQ,QAAQC,UAEV3D,EAAa,SAAC4D,GAAD,OACtB,SAAA/D,GAAQ,OAAIwD,MAAMC,EAAIpE,KAAKgF,QAAQ,OAAQN,GAAS,CAChDC,OAAQ,SACRI,QAAS,CACL,eAAgB,sBAEnBlB,MAAK,kBAAMM,MAAMC,EAAIvF,OACjBgF,MAAK,SAAAQ,GAAG,OAAIA,EAAIC,UAChBT,MAAK,SAAAU,GACF5D,EAAS,CACLhC,KAAMC,EACNE,QAASyF,OAGhBP,MAAMQ,QAAQC,WAClBT,MAAMQ,QAAQC,Y","file":"static/js/main.1c49a0f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parqueaderos.998bbaac.jpg\";","import reduxThunk from 'redux-thunk' // Para manejar operaciones asincronas como el fetch\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from '../redux/reducers';\r\nimport initialState from '../redux/initial-state.json';\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(reduxThunk)\r\n);\r\n\r\nglobal.store = store;\r\n\r\nexport default store;","import initialState from '../initial-state.json';\r\nimport { GET_ALL_USERS, SELECT_USER_TO_EDIT } from '../actions';\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case GET_ALL_USERS:\r\n            return { ...state, users: action.payload };\r\n        case SELECT_USER_TO_EDIT:\r\n            return { ...state, selectedUser: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../css/principal.css';\r\nimport carro from '../imagenes/parqueaderos.jpg';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MainScreen = ({ children }) => ( \r\n    <div className=\"contenedor\">\r\n        <section className=\"main\">\r\n            {children}\r\n        </section> \r\n        <aside>\r\n            <div className=\"imagen\">\r\n                <img src={carro} alt=\"logo\" />\r\n            </div> \r\n            <div>\r\n                <Link className=\"btn btn-secondary medium verde border-radius\" to=\"/create\" > \r\n                   Crear \r\n                </Link>\r\n                <Link className=\"btn btn-secondary medium verde border-radius\" to=\"/\"> \r\n                    Visualizar\r\n                </Link>   \r\n            </div> \r\n        </aside> \r\n    </div>\r\n);\r\n\r\nMainScreen.propTypes = {\r\n}\r\n\r\nexport default MainScreen;","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Link } from 'react-router-dom';\r\n// import jsquery\r\n\r\nclass Visualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.onGetAllUsers();\r\n    }    \r\n    \r\n    render() {\r\n        const { users, onSelectUserEdit, onDeleteUser } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"table table-bordered\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">Nro Evento</th>\r\n                            <th scope=\"col\">Nombre del Propietario</th>\r\n                            <th scope=\"col\">Categoria</th>\r\n                            <th scope=\"col\">Placa</th>\r\n                            <th scope=\"col\">Eliminar</th>\r\n                            <th scope=\"col\">Editar</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map((user, index) => (\r\n                            <tr>\r\n                                <th scope=\"row\">{index + 1}</th>\r\n                                <td>{user.nombre}</td>\r\n                                <td>{user.tipo}</td>\r\n                                <td>{user.placa}</td>\r\n                                <td><button type=\"button\" class=\"btn btn-danger\"onClick={() => onDeleteUser(user._id)}>Eliminar</button></td>\r\n                                <td><Link to=\"/edit\" type=\"button\" class=\"btn btn-success\" onClick={() => onSelectUserEdit(user._id)}>Editar</Link></td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nVisualizer.propTypes = {\r\n    onGetAllUsers: PropTypes.func.isRequired,\r\n    onSelectUserEdit: PropTypes.func.isRequired,\r\n    users: PropTypes.arrayOf(PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        nombre: PropTypes.string.isRequired,\r\n        tipo: PropTypes.string.isRequired,\r\n        placa: PropTypes.string.isRequired\r\n    }))\r\n};\r\n\r\nVisualizer.defaultProps = {\r\n    users: []\r\n};\r\n\r\nexport default Visualizer;\r\n\r\n// obtain(fetch) {\r\n//     fetch('http://localhost:3001/api/users/')\r\n//         .then(res => res.json())\r\n//         .then(data =>  {\r\n//             this.setState({eventos: data});\r\n//             console.log(JSON.stringify(this.state.eventos));\r\n//         })\r\n//         .catch(ex => console.error(ex));\r\n// }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/principal.css';\r\nimport Layout from '../../components/layout';\r\nimport Visualizer from './visualizer'\r\n\r\nconst MainScreen = ({\r\n    onGetAllUsers,\r\n    onSelectUserEdit,\r\n    users,\r\n    onDeleteUser\r\n}) => ( \r\n    <Layout>\r\n        <Visualizer \r\n            onGetAllUsers={onGetAllUsers}\r\n            onSelectUserEdit={onSelectUserEdit}\r\n            users={users}\r\n            onDeleteUser={onDeleteUser}\r\n        />\r\n    </Layout>\r\n);\r\n\r\nMainScreen.propTypes = {\r\n    onGetAllUsers: PropTypes.func.isRequired,\r\n    users: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default MainScreen;","import React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport VisualizeScreen from '../screens/visualize-screen';\r\nimport { onGetUsers, onSelectUserEdit, deleteUser } from '../redux/actions';\r\n\r\n\r\nconst VisualizeScreenContainer = ({\r\n    onGetAllUsers,\r\n    onSelectUserEdit,\r\n    users,\r\n    onDeleteUser\r\n}) => <VisualizeScreen \r\n    onGetAllUsers={onGetAllUsers}\r\n    onSelectUserEdit={onSelectUserEdit}\r\n    users={users}\r\n    onDeleteUser={onDeleteUser}\r\n/>\r\n\r\n\r\nVisualizeScreenContainer.propTypes = {\r\n    onGetAllUsers: PropTypes.func.isRequired,\r\n    onSelectUserEdit: PropTypes.func.isRequired,\r\n    users: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        nombre: PropTypes.string.isRequired,\r\n        tipo: PropTypes.string.isRequired,\r\n        placa: PropTypes.string.isRequired\r\n    }))\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    users: state.users,\r\n    selectedUser: state.selectedUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    onGetAllUsers: onGetUsers,\r\n    onSelectUserEdit,\r\n    onDeleteUser: deleteUser\r\n}, dispatch);\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(VisualizeScreenContainer);","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nombre: \"\",\r\n            tipo: \"\",\r\n            placa: \"\"\r\n        };;\r\n    }\r\n\r\n    onKeyPress = field => {\r\n        return evt => {\r\n            const val = evt.target.value;\r\n            const newState = { ...this.state }\r\n            newState[field] = val;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = () => {\r\n        const { nombre, tipo, placa } = this.state;\r\n        this.props.onSubmit({ nombre, tipo, placa });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputNombre\" className=\"col-sm-2 col-form-label\">Nombre</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('nombre')} value={this.state.Nombre} id=\"inputNombre\" placeholder=\"Nombre\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputTipo\" className=\"col-sm-2 col-form-label\">Tipo</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('tipo')} value={this.state.Tipo} id=\"inputTipo\" placeholder=\"Tipo\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputPlaca\" className=\"col-sm-2 col-form-label\">Placa</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('placa')} value={this.state.Placa} id=\"inputPlaca\" placeholder=\"Placa\" />\r\n                    </div>\r\n                </div>\r\n                    <div className=\"form-group row\">\r\n                    <div className=\"col-sm-10\">\r\n                        <Link to=\"/\" type=\"submit\" className=\"btn btn-primary\" onClick={this.handleOnSubmit}>Crear</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nForm.defaultProps = {\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport Layout from '../../components/layout';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/principal.css';\r\nimport CreateForm from './form'\r\n\r\nconst MainScreen = ({\r\n    onCreateUser\r\n}) => ( \r\n    <Layout>\r\n        <CreateForm onSubmit={onCreateUser}/>\r\n    </Layout>\r\n);\r\n\r\nMainScreen.propTypes = {\r\n    onGetAllUsers: PropTypes.func.isRequired,\r\n    users: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default MainScreen;","import React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport CreateScreen from '../screens/create-screen';\r\nimport { createUser } from '../redux/actions';\r\n\r\nconst CreateScreenContainer = ({\r\n    onCreateUser\r\n}) => <CreateScreen \r\n    onCreateUser={onCreateUser}\r\n/>\r\n\r\nCreateScreenContainer.propTypes = {\r\n    onCreateUser: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    onCreateUser: createUser \r\n}, dispatch);\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CreateScreenContainer);","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Link } from 'react-router-dom';\r\n// import jsquery\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nombre: props.userInfo.nombre,\r\n            tipo: props.userInfo.tipo,\r\n            placa: props.userInfo.placa\r\n        };;\r\n\r\n        console.log(this.state, 'xd');\r\n    }\r\n\r\n    onKeyPress = field => {\r\n        return evt => {\r\n            const val = evt.target.value;\r\n            const newState = { ...this.state }\r\n            newState[field] = val;\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = () => {\r\n        const { nombre, tipo, placa } = this.state;\r\n        this.props.onSubmit({ nombre, tipo, placa });\r\n    }\r\n\r\n    render() {\r\n        const { submitable } = this.props;\r\n\r\n        const { nombre, tipo, placa } = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputNombre\" className=\"col-sm-2 col-form-label\">Nombre</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('nombre')} value={nombre} id=\"inputNombre\" placeholder=\"Nombre\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputTipo\" className=\"col-sm-2 col-form-label\">Tipo</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('tipo')} value={tipo} id=\"inputTipo\" placeholder=\"Tipo\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"inputPlaca\" className=\"col-sm-2 col-form-label\">Placa</label>\r\n                    <div className=\"col-sm-10\">\r\n                        <input type=\"text\" className=\"form-control\" onChange={this.onKeyPress('placa')} value={placa} id=\"inputPlaca\" placeholder=\"Placa\" />\r\n                    </div>\r\n                </div>\r\n                    <div className=\"form-group row\">\r\n                    <div className=\"col-sm-10\">\r\n                        {submitable && (\r\n                            <Link to=\"/\" type=\"submit\" className=\"btn btn-primary\" onClick={this.handleOnSubmit}>Actualizar</Link>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    userInfo: PropTypes.shape({\r\n        nombre: PropTypes.string.isRequired,\r\n        tipo: PropTypes.string.isRequired,\r\n        placa: PropTypes.string.isRequired\r\n    }),\r\n    onSubmit: PropTypes.func.isRequired,\r\n    submitable: PropTypes.bool\r\n};\r\n\r\nForm.defaultProps = {\r\n    userInfo: {},\r\n    submitable: true\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport EditForm from './edit'\r\nimport Layout from '../../components/layout';\r\n\r\nconst EditScreen = ({\r\n    onEditUser,\r\n    selectedUser,\r\n    users\r\n}) => {\r\n    if (!selectedUser) {\r\n        alert(\"Usted no ha seleccionado ningún usuario para editar\")\r\n    }\r\n    const selectedUserInfo = users.find(user => user._id === selectedUser);\r\n\r\n    const handleOnEdit = ({ nombre, tipo, placa }) => {\r\n        onEditUser(selectedUser, { nombre, tipo, placa });\r\n    }\r\n\r\n    return ( \r\n        <Layout>\r\n            <EditForm onSubmit={handleOnEdit} submitable={Boolean(selectedUser)} userInfo={selectedUserInfo}/>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nEditScreen.propTypes = {\r\n    onEditUser: PropTypes.func.isRequired,\r\n    users: PropTypes.array.isRequired,\r\n    selectedUser: PropTypes.string.isRequired\r\n}\r\nexport default EditScreen;","import React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport EditScreen from '../screens/edit-screen';\r\nimport { editUser } from '../redux/actions';\r\n\r\nconst EditScreenContainer = ({\r\n    onEditUser,\r\n    users,\r\n    selectedUser\r\n}) => <EditScreen\r\n    onEditUser={onEditUser}\r\n    users={users}\r\n    selectedUser={selectedUser}\r\n/>\r\n\r\nEditScreenContainer.propTypes = {\r\n    onEditUser: PropTypes.func.isRequired,\r\n    users: PropTypes.array.isRequired,\r\n    selectedUser: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    users: state.users,\r\n    selectedUser: state.selectedUser\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n    onEditUser: editUser \r\n}, dispatch);\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(EditScreenContainer);","import React from 'react';\nimport './App.css';\nimport VisualizeContainer from './containers/visualize-screen'\nimport CreateScreen from './containers/create-screen'\nimport EditScreen from './containers/edit-screen'\nimport { Provider } from 'react-redux'\nimport store from './core/store';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <VisualizeContainer />\n            </Route>\n            <Route exact path=\"/edit\">\n              <EditScreen />\n            </Route>\n            <Route exact path=\"/delete\">\n              <div>\n                Ruta eliminar\n              </div>\n            </Route>\n            <Route exact path=\"/create\">\n              <CreateScreen />\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import api from './api.json';\r\n\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const CREATE_USER = 'CREATE_USER';\r\nexport const EDIT_USER = 'EDIT_USER';\r\nexport const SELECT_USER_TO_EDIT = 'SELECT_USER_TO_EDIT';\r\n\r\nexport const onGetUsers = () =>\r\n    dispatch => fetch(api.users)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        dispatch({\r\n            type: GET_ALL_USERS,\r\n            payload: data\r\n        })\r\n    })\r\n    .catch(Promise.reject);\r\n\r\nexport const onSelectUserEdit = (userId) => \r\n    dispatch => dispatch({\r\n        type: SELECT_USER_TO_EDIT,\r\n        payload: userId\r\n    }); \r\n\r\nexport const createUser = ({\r\n    nombre,\r\n    tipo,\r\n    placa\r\n}) => \r\n    dispatch => fetch(api.users, { \r\n        method: 'POST', \r\n        body: JSON.stringify({ nombre, tipo, placa }),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }})\r\n        .then(res => res.json())  \r\n        .catch(Promise.reject);\r\n\r\nexport const editUser = (userId, {\r\n    nombre,\r\n    tipo,\r\n    placa\r\n}) => \r\n    dispatch => fetch(api.user.replace('{id}', userId), { \r\n        method: 'PUT', \r\n        body: JSON.stringify({ nombre, tipo, placa }),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }})\r\n        .then(() => fetch(api.users)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                dispatch({\r\n                    type: GET_ALL_USERS,\r\n                    payload: data\r\n                })\r\n            })\r\n            .catch(Promise.reject))   \r\n        .catch(Promise.reject);\r\n\r\nexport const deleteUser = (userId) => \r\n    dispatch => fetch(api.user.replace('{id}', userId), { \r\n        method: 'DELETE', \r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }})\r\n        .then(() => fetch(api.users)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                dispatch({\r\n                    type: GET_ALL_USERS,\r\n                    payload: data\r\n                })\r\n            })\r\n            .catch(Promise.reject))  \r\n        .catch(Promise.reject);"],"sourceRoot":""}